// Generated by CoffeeScript 1.4.0
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

$(function() {
  var Presentation;
  Presentation = (function() {

    Presentation.prototype.defaultStyle = {
      position: 'absolute',
      width: '100%',
      height: '100%',
      top: 0,
      left: 0,
      background: '#929292',
      'z-index': 10000,
      display: 'none'
    };

    function Presentation(target) {
      this.target = target;
      this.stopPresentation = __bind(this.stopPresentation, this);

      this.startPresentation = __bind(this.startPresentation, this);

      this.target = $(this.target);
      this.id = this.target.parents('.entry').data('uuid');
      this.target.css(this.defaultStyle);
      this.target.attr('id', "presentation-" + this.id);
      this.target.addClass('prepared');
      this.target.data('self', this);
      this.style = $.extend({}, this.defaultStyle);
      this.slides = this.createSlides(this.target.find('div.slide'));
      this.setStartButton();
      this.target.appendTo($('body'));
    }

    Presentation.prototype.createSlides = function(slideDivs) {
      var idx, slide, slides;
      return slides = (function() {
        var _i, _len, _results;
        _results = [];
        for (idx = _i = 0, _len = slideDivs.length; _i < _len; idx = ++_i) {
          slide = slideDivs[idx];
          _results.push(this.createSlide(slide, idx));
        }
        return _results;
      }).call(this);
    };

    Presentation.prototype.createSlide = function(div, idx) {
      var $page;
      $page = $(div).data('pid', idx);
      $page.append(this.createFooter(idx));
      return $page;
    };

    Presentation.prototype.setStartButton = function() {
      var $startButton;
      $startButton = $('<button>', {
        "class": 'start-button'
      }).text('start presentation').on('click', this.startPresentation);
      return $startButton.insertBefore(this.target);
    };

    Presentation.prototype.startPresentation = function() {
      var hash, match, pid;
      hash = document.location.hash;
      pid = 0;
      this.target.addClass('current');
      this.target.css({
        display: 'block'
      });
      if ((hash != null) && (match = hash.match(/^\#(\d+)/))) {
        pid = match[1];
      }
      return $(this.slides[pid]).addClass('current');
    };

    Presentation.prototype.stopPresentation = function() {
      this.target.css({
        display: 'none'
      });
      this.target.removeClass('current');
      $(this.slides).each(function(slide) {
        return $(slide);
      });
      return document.location.hash = 0;
    };

    Presentation.prototype.nextPage = function() {
      var $current, pid;
      $current = this.target.find('.current');
      $current.removeClass('current');
      pid = $current.data('pid');
      if (this.slides[pid + 1] != null) {
        this.slides[pid + 1].addClass('current');
        return document.location.hash = pid + 1;
      } else {
        return this.stopPresentation();
      }
    };

    Presentation.prototype.prevPage = function() {
      var $current, pid, _ref;
      $current = this.target.find('.current');
      $current.removeClass('current');
      pid = $current.data('pid');
      if (this.slides[pid - 1] != null) {
        if ((_ref = this.slides[pid - 1]) != null) {
          _ref.addClass('current');
        }
        return document.location.hash = pid - 1;
      } else {
        return this.stopPresentation();
      }
    };

    Presentation.prototype.goTopPage = function() {
      var $current;
      $current = this.target.find('.current');
      $current.removeClass('current');
      return this.slides[0].addClass('current');
    };

    Presentation.prototype.showSummary = function() {};

    Presentation.prototype.createFooter = function(idx) {
      var footer;
      footer = $('<footer>');
      return footer.append($('<span>', {
        "class": 'page-id'
      }).text("" + idx + " / " + (this.target.find('.slide').length)));
    };

    return Presentation;

  })();
  $('.presentation').each(function(idx, presentation) {
    return new Presentation(presentation);
  });
  return $(document).keyup(function(ev) {
    var _ref, _ref1, _ref2, _ref3, _ref4;
    if (ev.which === 27) {
      return (_ref = $('.presentation.current').data('self')) != null ? typeof _ref.stopPresentation === "function" ? _ref.stopPresentation() : void 0 : void 0;
    } else if (ev.which === 39) {
      return (_ref1 = $('.presentation.current').data('self')) != null ? typeof _ref1.nextPage === "function" ? _ref1.nextPage() : void 0 : void 0;
    } else if (ev.which === 37) {
      return (_ref2 = $('.presentation.current').data('self')) != null ? typeof _ref2.prevPage === "function" ? _ref2.prevPage() : void 0 : void 0;
    } else if (ev.which === 38) {
      return (_ref3 = $('.presentation.current').data('self')) != null ? typeof _ref3.goTopPage === "function" ? _ref3.goTopPage() : void 0 : void 0;
    } else if (ev.which === 40) {
      return (_ref4 = $('.presentation.current').data('self')) != null ? typeof _ref4.showSummary === "function" ? _ref4.showSummary() : void 0 : void 0;
    }
  });
});
